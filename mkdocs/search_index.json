{
    "docs": [
        {
            "location": "/",
            "text": "Bedrock Configurator\n\n\nThis is the documentation for the configuration system for \nBedrock\n instances. We have two distinct types\nof configuration values: static and dynamic. Static configurations are those that are loaded at app startup in\nthe \nbedrock/settings/base.py\n file primarily. They require an app restart to pick up new values and get their\nvalues from either the environment or a .env file in the app root directory.\n\n\nThe second kind of configuration is one that can change while the app is running. At the moment the only use of\nthese is waffle switches and funnelcake configuration. These can be loaded from the same places as static configs\n(environment and .env) but also from the database. So you can continue using your \n.env\n file locally to test\nsettings, but we can distribute said settings to our running instances via the database update process. This is why\nwe've separated these values into separate files.\n\n\nStatic configurations are stored in the \nconfig\n directory in this repo and can only be updated via a push to the app-name\nbranch (as described below). The dynamic configs however will automatically roll out after a change is merged to the master\nbranch.\n\n\nQuick Start\n\n\nDynamic Configs\n\n\nSo you want to flip a waffle switch in production? Great! Do this:\n\n\n\n\nClone the \nmozmeao/www-config\n repo.\n\n\nFork the repo into your Github account.\n\n\nEdit the \nwaffle_configs/bedrock-prod.env\n file to add the name and value you need. You'd add a line like \nSWITCH_WE_DO_PHRASING=on\n to set that key and value in the settings database for prod. Or you can find the line that already has the variable you need and change the value if it already exists.\n\n\nCommit the change.\n\n\nPush the change to a branch on your fork.\n\n\nSubmit a pull-request against the \nmozmeao/www-config\n repo.\n\n\nAsk for a review in the \n#www\n IRC channel or in the PR itself.\n\n\nOnce the PR is reviewed and merged it will automatically roll out to our production instances in 5 to 10 minutes.\n\n\n\n\nStatic Configs\n\n\nLet's say you want to change a static config value in prod. Follow the following procedure:\n\n\n\n\nClone the \nmozmeao/www-config\n repo.\n\n\nFork the repo into your Github account.\n\n\nEdit the \nconfigs/bedrock-prod.env\n file to add the name and value you need. You'd add a line like \nSTAFF_NAMES=Woodhouse\n to set that key and value in the environment for prod. Or you can find the line that already has the variable you need and change the value if it already exists.\n\n\nCommit the change.\n\n\nPush the change to a branch on your fork.\n\n\nSubmit a pull-request against the \nmozmeao/www-config\n repo.\n\n\nAsk for a review in the \n#www\n IRC channel or in the PR itself.\n\n\nOnce the PR is reviewed and merged it can be applied: \ngit pull origin master && ./set-config bedrock-prod\n (assuming \norigin\n is your remote name for the \nmozmeao\n repo)\n\n\n\n\nHow it Works\n\n\nThis repo is designed to hold the \nnon-secret environment variable configuration options\n for the various instances of \nBedrock\n. The idea is that you edit the \n*.env\n file associated with the bedrock Deis app you'd like to update (e.g. \nbedrock-prod.env\n). This would be submitted as a pull-request to the \nwww-config\n repo, the PR would then be reviewed and merged to \nmaster\n. Once the config in the \nmaster\n branch was ready to apply, that revision of \nmaster\n would be pushed to a branch named after the Deis app name that needed updating (e.g. \nbedrock-prod\n). This would start the process of applying the configuration to our Deis clusters in sequence, and running our \nheadless\n tests against them in turn.\n\n\nIf the change to be applied needed to be done as quickly as possible, for example if something is broken, you can alternately push \nmaster\n to a similar branch as above but prefixed with \nfast/\n (e.g. \nfast/bedrock-prod\n). This will do the same thing as above but every Deis cluster will be pushed and tested simultaneously (or in parallel, instead of in series).\n\n\nThere is a script in the repo to help with this called \n./set-config\n. It allows you to do the following:\n\n\n$ ./set-config bedrock-stage\n\n\n\n\nThis will push your currently checked out revision of the configurations to the app name passed to it. You can also invoke it with \n-f\n or \n--fast\n and it will cause the configurations to be applied in parallel as mentioned above.\n\n\n$ ./set-config -f bedrock-prod\n\n\n\n\nEditing the Configs\n\n\nThe configurations are in the \nconfigs\n and \nwaffle_configs\n directories in the repo. They are simple environment files in the \nformat usable by Foreman\n. The final list of variables to apply for static values will be the mix of 3 possible files.\n\n\n\n\nconfigs/global.env\n: applied to every app.\n\n\nconfigs/{cluster-name}.env\n: applied to every app in \n{cluster-name}\n (e.g. \ntokyo\n or \nfrankfurt\n). See \njenkins/regions.yml\n for more on the clusters.\n\n\nconfigs/{app-name}.env\n: applied to the app named for the file in every cluster.\n\n\n\n\nYou'll almost always only need to edit the file for a particular app, but the others are available should you need them.\n\n\nYou can also delete a static environment variable from an app. Simply set the value of the variable to nothing or whitespace:\n\n\n# configs to set\nDUDE=Abides\n\n# configs to delete\nWALTER=\n\n\n\n\nIn the above example, if the app had \nWALTER=bowling\n set, then this would remove the \nWALTER\n environment variable from the app\nvia the \ndeis config:unset\n command. It is recommended to keep deleted variables grouped together at the bottom of the env files.\n\n\nDeleting a dynamic value (those in the \nwaffle_config\n directory) is simply deleting the line from the file. The full list of configurations are refreshed every time for those values.",
            "title": "Home"
        },
        {
            "location": "/#bedrock-configurator",
            "text": "This is the documentation for the configuration system for  Bedrock  instances. We have two distinct types\nof configuration values: static and dynamic. Static configurations are those that are loaded at app startup in\nthe  bedrock/settings/base.py  file primarily. They require an app restart to pick up new values and get their\nvalues from either the environment or a .env file in the app root directory.  The second kind of configuration is one that can change while the app is running. At the moment the only use of\nthese is waffle switches and funnelcake configuration. These can be loaded from the same places as static configs\n(environment and .env) but also from the database. So you can continue using your  .env  file locally to test\nsettings, but we can distribute said settings to our running instances via the database update process. This is why\nwe've separated these values into separate files.  Static configurations are stored in the  config  directory in this repo and can only be updated via a push to the app-name\nbranch (as described below). The dynamic configs however will automatically roll out after a change is merged to the master\nbranch.",
            "title": "Bedrock Configurator"
        },
        {
            "location": "/#quick-start",
            "text": "",
            "title": "Quick Start"
        },
        {
            "location": "/#dynamic-configs",
            "text": "So you want to flip a waffle switch in production? Great! Do this:   Clone the  mozmeao/www-config  repo.  Fork the repo into your Github account.  Edit the  waffle_configs/bedrock-prod.env  file to add the name and value you need. You'd add a line like  SWITCH_WE_DO_PHRASING=on  to set that key and value in the settings database for prod. Or you can find the line that already has the variable you need and change the value if it already exists.  Commit the change.  Push the change to a branch on your fork.  Submit a pull-request against the  mozmeao/www-config  repo.  Ask for a review in the  #www  IRC channel or in the PR itself.  Once the PR is reviewed and merged it will automatically roll out to our production instances in 5 to 10 minutes.",
            "title": "Dynamic Configs"
        },
        {
            "location": "/#static-configs",
            "text": "Let's say you want to change a static config value in prod. Follow the following procedure:   Clone the  mozmeao/www-config  repo.  Fork the repo into your Github account.  Edit the  configs/bedrock-prod.env  file to add the name and value you need. You'd add a line like  STAFF_NAMES=Woodhouse  to set that key and value in the environment for prod. Or you can find the line that already has the variable you need and change the value if it already exists.  Commit the change.  Push the change to a branch on your fork.  Submit a pull-request against the  mozmeao/www-config  repo.  Ask for a review in the  #www  IRC channel or in the PR itself.  Once the PR is reviewed and merged it can be applied:  git pull origin master && ./set-config bedrock-prod  (assuming  origin  is your remote name for the  mozmeao  repo)",
            "title": "Static Configs"
        },
        {
            "location": "/#how-it-works",
            "text": "This repo is designed to hold the  non-secret environment variable configuration options  for the various instances of  Bedrock . The idea is that you edit the  *.env  file associated with the bedrock Deis app you'd like to update (e.g.  bedrock-prod.env ). This would be submitted as a pull-request to the  www-config  repo, the PR would then be reviewed and merged to  master . Once the config in the  master  branch was ready to apply, that revision of  master  would be pushed to a branch named after the Deis app name that needed updating (e.g.  bedrock-prod ). This would start the process of applying the configuration to our Deis clusters in sequence, and running our  headless  tests against them in turn.  If the change to be applied needed to be done as quickly as possible, for example if something is broken, you can alternately push  master  to a similar branch as above but prefixed with  fast/  (e.g.  fast/bedrock-prod ). This will do the same thing as above but every Deis cluster will be pushed and tested simultaneously (or in parallel, instead of in series).  There is a script in the repo to help with this called  ./set-config . It allows you to do the following:  $ ./set-config bedrock-stage  This will push your currently checked out revision of the configurations to the app name passed to it. You can also invoke it with  -f  or  --fast  and it will cause the configurations to be applied in parallel as mentioned above.  $ ./set-config -f bedrock-prod",
            "title": "How it Works"
        },
        {
            "location": "/#editing-the-configs",
            "text": "The configurations are in the  configs  and  waffle_configs  directories in the repo. They are simple environment files in the  format usable by Foreman . The final list of variables to apply for static values will be the mix of 3 possible files.   configs/global.env : applied to every app.  configs/{cluster-name}.env : applied to every app in  {cluster-name}  (e.g.  tokyo  or  frankfurt ). See  jenkins/regions.yml  for more on the clusters.  configs/{app-name}.env : applied to the app named for the file in every cluster.   You'll almost always only need to edit the file for a particular app, but the others are available should you need them.  You can also delete a static environment variable from an app. Simply set the value of the variable to nothing or whitespace:  # configs to set\nDUDE=Abides\n\n# configs to delete\nWALTER=  In the above example, if the app had  WALTER=bowling  set, then this would remove the  WALTER  environment variable from the app\nvia the  deis config:unset  command. It is recommended to keep deleted variables grouped together at the bottom of the env files.  Deleting a dynamic value (those in the  waffle_config  directory) is simply deleting the line from the file. The full list of configurations are refreshed every time for those values.",
            "title": "Editing the Configs"
        },
        {
            "location": "/configs/",
            "text": "Current Configurations\n\n\nbedrock-dev\n\n\n\n\nAWS_DB_S3_BUCKET\n\n\nbedrock-db-dev\n\n\nFUNNELCAKE_101_LOCALES\n\n\nen-US\n\n\nFUNNELCAKE_101_PLATFORMS\n\n\nwin\n\n\nFUNNELCAKE_102_LOCALES\n\n\nen-US\n\n\nFUNNELCAKE_102_PLATFORMS\n\n\nwin\n\n\nFUNNELCAKE_103_LOCALES\n\n\nde\n\n\nFUNNELCAKE_103_PLATFORMS\n\n\nwin\n\n\nFUNNELCAKE_104_LOCALES\n\n\nde\n\n\nFUNNELCAKE_104_PLATFORMS\n\n\nwin\n\n\nMOFO_SECURITY_ADVISORIES_BRANCH\n\n\ntesting\n\n\n\n\nbedrock-stage\n\n\n\n\nAWS_DB_S3_BUCKET\n\n\nbedrock-db-stage\n\n\nFUNNELCAKE_130_LOCALES\n\n\nen-US\n\n\nFUNNELCAKE_130_PLATFORMS\n\n\nwin\n\n\nFUNNELCAKE_131_LOCALES\n\n\nen-US\n\n\nFUNNELCAKE_131_PLATFORMS\n\n\nwin\n\n\nFUNNELCAKE_132_LOCALES\n\n\nen-US\n\n\nFUNNELCAKE_132_PLATFORMS\n\n\nwin\n\n\nFUNNELCAKE_134_LOCALES\n\n\nen-US\n\n\nFUNNELCAKE_134_PLATFORMS\n\n\nwin,win64\n\n\nFUNNELCAKE_135_LOCALES\n\n\nen-US\n\n\nFUNNELCAKE_135_PLATFORMS\n\n\nwin,win64\n\n\nSTD_SMS_COUNTRIES_DESKTOP\n\n\nUS,DE,FR\n\n\nSTD_SMS_COUNTRIES_WHATSNEW50\n\n\nUS,DE,FR\n\n\nSTD_SMS_COUNTRIES_WHATSNEW61\n\n\nUS,DE\n\n\nSWITCH_DATA_PRIVACY_DAY_2017\n\n\non\n\n\nSWITCH_DISABLE_SHA1_DOWNLOADS\n\n\noff\n\n\nSWITCH_EXPERIMENT_DE_HEARTS\n\n\noff\n\n\nSWITCH_EXPERIMENT_HOME_2018\n\n\noff\n\n\nSWITCH_FIREFOX_DEV_FALL\n\n\non\n\n\nSWITCH_FIREFOX_HOME_FBVIDEOCHAT_FUNNELCAKE\n\n\non\n\n\nSWITCH_FIREFOX_NEW_COMPARE_CHROME_EXPERIMENT\n\n\non\n\n\nSWITCH_FIREFOX_NEW_COMPARE_EDGE_EXPERIMENT\n\n\non\n\n\nSWITCH_FIREFOX_NEW_COMPARE_SAFARI_EXPERIMENT\n\n\non\n\n\nSWITCH_FIREFOX_UPDATE_NOTIFICATION\n\n\non\n\n\nSWITCH_FIREFOX_UPDATE_NOTIFICATION_MODAL\n\n\non\n\n\nSWITCH_FIREFOX_YANDEX\n\n\non\n\n\nSWITCH_FIRSTRUN_COPY_EXPERIMENT\n\n\noff\n\n\nSWITCH_NEWSLETTER_MAINTENANCE_MODE\n\n\noff\n\n\nSWITCH_SHOW_POCKET_FEED\n\n\non\n\n\nSWITCH_TRACKING_PIXEL\n\n\non\n\n\n\n\nbedrock-prod\n\n\n\n\nAWS_DB_S3_BUCKET\n\n\nbedrock-db-prod\n\n\nFUNNELCAKE_130_LOCALES\n\n\nen-US\n\n\nFUNNELCAKE_130_PLATFORMS\n\n\nwin\n\n\nFUNNELCAKE_131_LOCALES\n\n\nen-US\n\n\nFUNNELCAKE_131_PLATFORMS\n\n\nwin\n\n\nFUNNELCAKE_132_LOCALES\n\n\nen-US\n\n\nFUNNELCAKE_132_PLATFORMS\n\n\nwin\n\n\nFUNNELCAKE_134_LOCALES\n\n\nen-US\n\n\nFUNNELCAKE_134_PLATFORMS\n\n\nwin,win64\n\n\nFUNNELCAKE_135_LOCALES\n\n\nen-US\n\n\nFUNNELCAKE_135_PLATFORMS\n\n\nwin,win64\n\n\nSTD_SMS_COUNTRIES_DESKTOP\n\n\nUS,DE,FR\n\n\nSTD_SMS_COUNTRIES_WHATSNEW50\n\n\nUS,DE,FR\n\n\nSTD_SMS_COUNTRIES_WHATSNEW61\n\n\nUS,DE\n\n\nSWITCH_DATA_PRIVACY_DAY_2017\n\n\non\n\n\nSWITCH_DISABLE_SHA1_DOWNLOADS\n\n\noff\n\n\nSWITCH_ESR\n\n\non\n\n\nSWITCH_EXPERIMENT_DE_HEARTS\n\n\noff\n\n\nSWITCH_EXPERIMENT_HOME_2018\n\n\noff\n\n\nSWITCH_FIREFOX_DEV_FALL\n\n\non\n\n\nSWITCH_FIREFOX_HOME_FBVIDEOCHAT_FUNNELCAKE\n\n\non\n\n\nSWITCH_FIREFOX_NEW_COMPARE_CHROME_EXPERIMENT\n\n\non\n\n\nSWITCH_FIREFOX_NEW_COMPARE_EDGE_EXPERIMENT\n\n\non\n\n\nSWITCH_FIREFOX_NEW_COMPARE_SAFARI_EXPERIMENT\n\n\non\n\n\nSWITCH_FIREFOX_UPDATE_NOTIFICATION\n\n\non\n\n\nSWITCH_FIREFOX_UPDATE_NOTIFICATION_MODAL\n\n\non\n\n\nSWITCH_FIREFOX_YANDEX\n\n\non\n\n\nSWITCH_FIRSTRUN_COPY_EXPERIMENT\n\n\noff\n\n\nSWITCH_NEWSLETTER_MAINTENANCE_MODE\n\n\noff\n\n\nSWITCH_SHOW_POCKET_FEED\n\n\non\n\n\nSWITCH_TRACKING_PIXEL\n\n\non",
            "title": "Current Configs"
        },
        {
            "location": "/configs/#current-configurations",
            "text": "",
            "title": "Current Configurations"
        },
        {
            "location": "/configs/#bedrock-dev",
            "text": "AWS_DB_S3_BUCKET  bedrock-db-dev  FUNNELCAKE_101_LOCALES  en-US  FUNNELCAKE_101_PLATFORMS  win  FUNNELCAKE_102_LOCALES  en-US  FUNNELCAKE_102_PLATFORMS  win  FUNNELCAKE_103_LOCALES  de  FUNNELCAKE_103_PLATFORMS  win  FUNNELCAKE_104_LOCALES  de  FUNNELCAKE_104_PLATFORMS  win  MOFO_SECURITY_ADVISORIES_BRANCH  testing",
            "title": "bedrock-dev"
        },
        {
            "location": "/configs/#bedrock-stage",
            "text": "AWS_DB_S3_BUCKET  bedrock-db-stage  FUNNELCAKE_130_LOCALES  en-US  FUNNELCAKE_130_PLATFORMS  win  FUNNELCAKE_131_LOCALES  en-US  FUNNELCAKE_131_PLATFORMS  win  FUNNELCAKE_132_LOCALES  en-US  FUNNELCAKE_132_PLATFORMS  win  FUNNELCAKE_134_LOCALES  en-US  FUNNELCAKE_134_PLATFORMS  win,win64  FUNNELCAKE_135_LOCALES  en-US  FUNNELCAKE_135_PLATFORMS  win,win64  STD_SMS_COUNTRIES_DESKTOP  US,DE,FR  STD_SMS_COUNTRIES_WHATSNEW50  US,DE,FR  STD_SMS_COUNTRIES_WHATSNEW61  US,DE  SWITCH_DATA_PRIVACY_DAY_2017  on  SWITCH_DISABLE_SHA1_DOWNLOADS  off  SWITCH_EXPERIMENT_DE_HEARTS  off  SWITCH_EXPERIMENT_HOME_2018  off  SWITCH_FIREFOX_DEV_FALL  on  SWITCH_FIREFOX_HOME_FBVIDEOCHAT_FUNNELCAKE  on  SWITCH_FIREFOX_NEW_COMPARE_CHROME_EXPERIMENT  on  SWITCH_FIREFOX_NEW_COMPARE_EDGE_EXPERIMENT  on  SWITCH_FIREFOX_NEW_COMPARE_SAFARI_EXPERIMENT  on  SWITCH_FIREFOX_UPDATE_NOTIFICATION  on  SWITCH_FIREFOX_UPDATE_NOTIFICATION_MODAL  on  SWITCH_FIREFOX_YANDEX  on  SWITCH_FIRSTRUN_COPY_EXPERIMENT  off  SWITCH_NEWSLETTER_MAINTENANCE_MODE  off  SWITCH_SHOW_POCKET_FEED  on  SWITCH_TRACKING_PIXEL  on",
            "title": "bedrock-stage"
        },
        {
            "location": "/configs/#bedrock-prod",
            "text": "AWS_DB_S3_BUCKET  bedrock-db-prod  FUNNELCAKE_130_LOCALES  en-US  FUNNELCAKE_130_PLATFORMS  win  FUNNELCAKE_131_LOCALES  en-US  FUNNELCAKE_131_PLATFORMS  win  FUNNELCAKE_132_LOCALES  en-US  FUNNELCAKE_132_PLATFORMS  win  FUNNELCAKE_134_LOCALES  en-US  FUNNELCAKE_134_PLATFORMS  win,win64  FUNNELCAKE_135_LOCALES  en-US  FUNNELCAKE_135_PLATFORMS  win,win64  STD_SMS_COUNTRIES_DESKTOP  US,DE,FR  STD_SMS_COUNTRIES_WHATSNEW50  US,DE,FR  STD_SMS_COUNTRIES_WHATSNEW61  US,DE  SWITCH_DATA_PRIVACY_DAY_2017  on  SWITCH_DISABLE_SHA1_DOWNLOADS  off  SWITCH_ESR  on  SWITCH_EXPERIMENT_DE_HEARTS  off  SWITCH_EXPERIMENT_HOME_2018  off  SWITCH_FIREFOX_DEV_FALL  on  SWITCH_FIREFOX_HOME_FBVIDEOCHAT_FUNNELCAKE  on  SWITCH_FIREFOX_NEW_COMPARE_CHROME_EXPERIMENT  on  SWITCH_FIREFOX_NEW_COMPARE_EDGE_EXPERIMENT  on  SWITCH_FIREFOX_NEW_COMPARE_SAFARI_EXPERIMENT  on  SWITCH_FIREFOX_UPDATE_NOTIFICATION  on  SWITCH_FIREFOX_UPDATE_NOTIFICATION_MODAL  on  SWITCH_FIREFOX_YANDEX  on  SWITCH_FIRSTRUN_COPY_EXPERIMENT  off  SWITCH_NEWSLETTER_MAINTENANCE_MODE  off  SWITCH_SHOW_POCKET_FEED  on  SWITCH_TRACKING_PIXEL  on",
            "title": "bedrock-prod"
        }
    ]
}